# ⚙️ Backend – Medical Care AI Assistant (FastAPI)

This is the backend for the Medical Care AI Assistant, built with FastAPI. It powers intelligent chat, medical analysis, image processing, and research features using Gemini and Tavily APIs. The architecture is modular, clean, and built for scalability and clarity.

---

## 🛠️ Tech Stack

- **FastAPI** – Web framework for building APIs
- **Uvicorn** – ASGI server for local development
- **Pydantic** – Data validation and serialization
- **httpx / requests** – For external API calls
- **dotenv** – Environment variable management

---

## 📁 Folder Structure

```
Medical Care AI/
├── .vscode/                    # Editor settings
├── render.yaml                 # Deployment config
├── README.md                   # Project documentation
├── backend/
│   ├── .env                    # Environment variables
│   ├── .env.example            # Sample env file
│   ├── .gitignore              # Git exclusions
│   ├── requirements.txt        # Python dependencies
│   ├── venv/                   # Virtual environment
│   └── app/
│       ├── __pycache__/
│       ├── __init__.py
│       ├── config.py           # Global config
│       ├── main.py             # App entry point
│       ├── chains/
│       │   ├── __pycache__/
│       │   ├── analysis_chain.py   # Handles medical analysis logic
│       │   └── chat_chain.py       # Handles chat flow logic
│       ├── middleware/
│       │   └── usage_tracker.py    # Tracks usage and limits
│       ├── models/
│       │   ├── __pycache__/
│       │   └── schemas.py          # Pydantic models for requests/responses
│       ├── routes/
│       │   ├── __pycache__/
│       │   ├── __init__.py
│       │   ├── analysis.py         # Endpoint for medical analysis
│       │   ├── health.py           # Health check endpoint
│       │   ├── image.py            # Image processing endpoint
│       │   └── research.py         # Web research endpoint
│       └── services/
│           ├── __pycache__/
│           ├── gemini_service.py   # Gemini API integration
│           └── tavily_service.py   # Tavily API integration
```

---

## 🚀 How It Works

Each module is responsible for a specific domain:

| Module             | Purpose                                         |
|--------------------|--------------------------------------------------|
| `chains/`          | Defines logic flows for chat and analysis        |
| `middleware/`      | Tracks usage and enforces rate limits            |
| `models/`          | Defines request and response schemas             |
| `routes/`          | Exposes API endpoints for analysis, health, image, and research |
| `services/`        | Handles external API calls to Gemini and Tavily |
| `main.py`          | Initializes FastAPI app and includes routers     |
| `config.py`        | Loads environment variables and global settings  |

---

## 🔐 Rate Limiting & Usage Tracking

- Implemented in `usage_tracker.py`
- Tracks requests per IP or session
- Enforces:
  - **Gemini**: 200 requests/day
  - **Tavily**: 1000 requests/month
- Returns `429 Too Many Requests` if limits are exceeded

---

## 🔑 Environment Variables

Stored in `.env` and loaded via `config.py`:

```
GEMINI_API_KEY=your_google_key
TAVILY_API_KEY=your_tavily_key
GEMINI_DAILY_LIMIT=200
TAVILY_MONTHLY_LIMIT=1000
```

Use `.env.example` as a template for setup.

---

## 🧪 Local Setup

1. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # or venv\Scripts\activate on Windows
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Add your `.env` file with valid API keys.

4. Run the server:
   ```bash
   uvicorn app.main:app --reload
   ```

5. Test endpoints using Postman, curl, or the React frontend.

---

## 💡 Notes

- Gemini and Tavily quotas reset daily/monthly—track usage carefully.
- Modular structure makes it easy to expand features or refactor logic.
- You can add authentication, logging, or database support as needed.

---

## 🙌 Credits

Backend crafted by Empress 👑 and her AI companion. Powered by FastAPI, Gemini, Tavily, and a clear vision for intelligent healthcare support.
```
